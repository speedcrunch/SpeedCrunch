<?xml version="1.0" ?>
<!DOCTYPE book PUBLIC "-//KDE//DTD DocBook XML V4.2-Based Variant V1.1//EN" "dtd/kdex.dtd" [
  <!ENTITY % addindex "IGNORE">
  <!ENTITY % English "INCLUDE"> <!-- change language only here -->
<!ENTITY app "<application>Speedcrunch</application>">
]>

<book lang="&language;">
<bookinfo>
<title>The SpeedCrunch Handbook</title>

<authorgroup>
<author><firstname>Ariya</firstname> <surname>Hidayat</surname></author>
<author><firstname>Jonathan</firstname><surname>Jesse</surname></author>
<author><firstname>Wolf</firstname><surname>Lammen</surname></author>
<!-- TRANS:ROLES_OF_TRANSLATORS -->
</authorgroup>


<copyright>
<year>2007</year>
<holder>Ariya Hidayat</holder>
</copyright>

<legalnotice>&FDLNotice;</legalnotice>

<date>2009-03-06</date>
<releaseinfo>0.11</releaseinfo>

<abstract><para>SpeedCrunch is a multiplatform desktop calculator for power users</para></abstract>

<keywordset>
<keyword>SpeedCrunch</keyword>
<keyword>calculator</keyword>
</keywordset>

</bookinfo>

<chapter id="introduction">
<title>Introduction</title>

<para>This document describes &app; version 0.11, a multiplatform desktop calculator for power users.</para>

<para>Have fun with &app;!</para>
</chapter>

<chapter id="installation">
<title>Installation</title>

<sect1 id="installation-windows">
<title>Installation for &Microsoft; &Windows;</title>
<para>To install &app; on &Microsoft; &Windows;, download the installer from the <ulink url="http://speedcrunch.org/download.html">&app; website</ulink>.  Once the installer is downloaded, launch the application to install &app;.  By default &app; is found in the Start Menu, under All Programs, &app; and is stored in C:\Program Files\Speedcrunch.
</para>
</sect1>

<sect1 id="installation-macos">
<title>Installation for &Mac; OS X</title>
<para>To install &app; on &Mac; OS X (10.3 (Panther), 10.4 (Tiger), and 10.5 (Leopard)), download the installer from the <ulink url="speedcrunch.org/download.htm">&app; Website</ulink>.  Once the file is downloaded, click on the binary file, and then follow the step-by-step instructions.</para>
</sect1>

<sect1 id="installation-linux">
<title>Installation for &Linux;</title>
<para>To install &app; on &Linux; please follow the directions specific to the distribution you use.  If your distribution is not listed, then either find the appliacation in the package manager which your distribution uses or use the instructions to compile your own version.</para>
<sect2 id="installation-suse">
<title>Installation for OpenSUSE</title>
<para>Trivial, isn't it?</para>
</sect2>

<sect2 id="installation-kubuntu">
<title>Installation for &kubuntu;</title>

<para>SpeedCrunch is part of default &kubuntu; installation since &kubuntu; 5.10.
It is located in the K Menu, Utilities, Calculator (SpeedCrunch).</para>

<para>If it is not available yet, SpeedCrunch can be installed using the following terminal command:</para>

<screen>
<command>apt-get install speedcrunch</command>
</screen>


</sect2>

<sect2 id="installation-ubuntu">
<title>Installation for &ubuntu;</title>

<para>&app; is installed by default as a part of &kubuntu;, however in &ubuntu;, it is as simple as sudo apt-get install speedcrunch.</para>

<screen>
<command>apt-get install speedcrunch</command>
</screen>

</sect2>

<sect2 id="installation-fedora">
<title>Installation for Fedora Core</title>

<para>&app; is part of Fedora Extras and is provided by the
package <varname>speedcrunch</varname>. This package can be installed
either with the graphical software management program Pirut,
or with the terminal command:</para>

<screen>
<command>yum install speedcrunch</command>
</screen>

<para>To update SpeedCrunch to the latest version, use the terminal
command:</para>

<screen>
<command>yum update speedcrunch</command>
</screen>

</sect2>
<sect2 id="installation-debian">
<title>Installation for Debian</title>
<para>Installation on Debian is as simple as:</para>
<screen>
<command>apt-get install speedcrunch</command>
</screen>
</sect2>
</sect1>

<sect1 id="compile">
<title>Compilation from source code</title>

<para>To compile SpeedCrunch from source code, the following tools are
required:</para>

<itemizedlist>
<listitem>
<para>CMake version 2.4.4 or newer (http://www.cmake.org/)</para>
</listitem>
<listitem>
<para>Nokia's &Qt; framework version 4.4 or newer (http://www.qtsoftware.com/)</para>
</listitem>
<listitem>
<para>C++ compiler</para>
</listitem>
</itemizedlist>

<para>It is necessary to create a build folder which specifies the target
location for the buid process. In this build folder, CMake should be
invoked. The input for CMake will be the src folder in the source tree.
The exact steps to do all these will depend on the operating system.</para>

<para>As an example, to compile and build SpeedCrunch on &Linux; using GCC,
use the following commands:</para>

<screen>
tar zxvf speedcrunch-0.11.tar.gz
cd speedcrunch-0.11
mkdir build
cd build
cmake ../src
make
</screen>

</sect1>

</chapter>

<!--chapter id="getting-started">
<title>Getting Started</title>
</chapter>

<chapter id="algebraic-notation">
<title>Algebraic Notation</title-->

<chapter id="using-functions">
<title>Using Functions</title>
<sect1 id="alphabetical-listing">
<title>Alphabetical listing of functions</title>
<variablelist>
<varlistentry>
<term>abs (x)</term>
<listitem><para>Returns |x|, turning negative numbers into positive ones, and leaving positive ones unchanged.</para></listitem>
</varlistentry>
<varlistentry>
<term>acos (x)</term>
<listitem><para>Returns the arc cos (x), the inverse function to cos y</para>
<para>The return value is dependent on the degree setting; if &quot;degrees&quot; is enabled, the return value is from the range 0 &lt;= result &lt;= 180, else from 0 &lt;= result &lt;= &pi;.</para></listitem>
</varlistentry>
<varlistentry>
<term>and (x1; x2; ...)</term>
<listitem><para>Performs a bitwise logical AND on the submitted parameter(s) (one or more).
All parameters have to be integers from the range -2^255 to +2^256-1 (signed or unsigned 256 bit integers). The result is from -2^255 to +2^255-1 (signed integer).  Note that and(x) is not the identity, because the unsigned +2^255 is mapped to the signed -2^255, for example.  An error is returned, if the parameters are not from the valid range.</para></listitem>
</varlistentry>
<varlistentry>
<term>arcosh (x)</term>
<listitem><para>Computes the area hyperbolic cosine of x, the inverse fuction to cosh y.  arcosh (x) is the positive solution to cosh(y)=x.  Except for 1, there exists a second solution to this equation: -arcosh (x).  The parameter x has to be &gt;=1.</para></listitem>
</varlistentry>
<varlistentry>
<term>arsinh(x)</term>
<listitem><para>Computes the area hyperbolic sine of x, the inverse function to sinh y.  arsinh (x) is the only solution to sinh(y)=x.</para></listitem>
</varlistentry>
<varlistentry>
<term>artanh (x)</term>
<listitem><para>Computes the area hyperbolic tangens of x, the inverse function to tanh y.  artanh (x) is the only solution to tanh (y) = x.  The parameter x has to fulfil -1 &lt; x &lt; 1. </para></listitem>
</varlistentry>
<varlistentry>
<term>asin (x)</term>
<listitem><para>Returns the arc sin (x).  The inverse function to sin.  The return value is dependent on the degree setting; if &quot;degrees&quot; is enabled, the return value is from the range -90 &lt;= result &lt;= 90, else from -pie/2 &lt;= result &lt;= pie2.</para></listitem>
</varlistentry>
<varlistentry>
<term>atan (x)</term>
<listitem><para>Returns the arc tan (x), the inverse function to tan y.  The return value is dependent on the degree setting; if &quot;degrees&quot; is enaled, the return value is from the range -90 &lt; result &lt; 90, else from -pie/2 &lt; result &lt; pie/2.</para>
<para> The arc tan(x) is the principal solution to the equation tan (y) = x.  Other solutions are (radians): arc tran (x) + n*pie for all integers n; or (degrees): arc tan (x) + n*180 for all integers n.</para></listitem>
</varlistentry>
<varlistentry>
<term>average (x1; x2; ...)</term>
<listitem><para>Computes the average, or mean value of the sumitted parameter(s) (one or more).</para></listitem>
</varlistentry>
<varlistentry>
<term>bin (n)</term>
<listitem><para>Displays n in binary format, without globally changing the output format.  A fractional part of n is cut off efore conversion, and the remaining integral part has to be from the range -2^255 to +2^256-1.</para></listitem>
</varlistentry>
<varlistentry>
<term>binomcdf (max; trails; p)</term>
<listitem><para>Trials is a non-negative integer, max a positive integer, and 0 &lt;= p &lt;= 1.  This function determines the probability, that in a series of 'trials' independent probabilistic tests, each resulting in an event with probaility p, at most 'max' events occur.</para></listitem>
</varlistentry>
<varlistentry>
<term>binommean (trials; p)</term>
<listitem><para>Trials is a non-negative integer, 0 &lt;= p &lt;= 1.  If you have 'trials' independent tests each of them resulting in a given event with a probability p, this number tells you how many events you will have on average.</para></listitem>
</varlistentry>
<varlistentry>
<term>binompmf (hits; trials; p)</term>
<listitem><para>Trials is a non-negative integer, max a positive integer, and 0 &lt;= p &lt;= 1.  This function determines the probability, that in a series of 'trials' independent probabilistic tests, each resulting in an event with probability p, exactly 'hits' events occur.</para></listitem>
</varlistentry>
<varlistentry>
<term>binomvar (trials; p)</term>
<listitem><para> Trials is a non-negative integer, 0 &lt;= p &lt;= 1.  The variance of the binominal distribution function, based on 'trials' independent tests, each resulting in an event with probability p.  In other words, it tells how 'good' the result of binommean is.</para></listitem>
</varlistentry>
<varlistentry>
<term>cbrt(x)</term>
<listitem><para>Computes the third (cubic) root x.  This function operates on negative numbers as well. The inverse function is y^3.</para></listitem>
</varlistentry>
<varlistentry>
<term>ceil (x)</term>
<listitem><para>Finds the smalles integer greater then or equal to x, the ceiling of x.</para></listitem>
</varlistentry>
<varlistentry>
<term>compln (n; bits group)</term>
<listitem><para>Convert to signed integer two's complement notation: negative numbers are converted to two's complement with bits extended to the least whole multiple of 'bits group' sufficient to represent the whole value n, positive numbers are only truncated to integer part. The result is always unsigned, sign is represented by the most significant bit. E.g. hex (compln (-0xFFFFF; 16)) returns 0xFFF00001, the 32-bit two's complement bit pattern of -1048575.</para></listitem>
</varlistentry>
<varlistentry>
<term>cos (x)</term>
<listitem><para>Evaluates the cosine of x.  The result is dependent on the degree setting.  If &quot;degrees&quot; is active, the paramter x is assumed to be an arc from a 360 degree circle, otherwise a full circle is represented by 2*pie.  The inverse function is acos(y).  Although the cosine is mathematically defined for all x, for x beyond approximately 1e77, the periodicity of the cosine is not recognized any more, so &app; issues an error then.</para></listitem>
</varlistentry>
<varlistentry>
<term>cosh (x)</term>
<listitem><para>Finds the hyperbolic cosine of x.  This function overflows for |x| &gt; 1236190959.52.  The inverse function is arcosh.</para></listitem>
</varlistentry>
<varlistentry>
<term>cot (x)</term>
<listitem><para>Evaluates the cotangent of x.  The result is dependent on the degree setting.  If &quot;degrees&quot; is active, the parameter x is assumed to be an arc from a 360 degree circle, otherwise a full circle is repsented by 2*pie.  Although the cotangent is mathematically defined for all x, for x beyond approximately 1e77, the periodicity of the cotangent is not recognized any more so &app; issues an error.</para></listitem>
</varlistentry>
<varlistentry>
<term>csc (x)</term>
<listitem><para>Evaulates the cosecant of x.  The result is dependent on the degree setting.  If &quot;degrees&quot; is active, the paramter x is assumed to be an arc from a 360 degree circle, otherwise a full circle is represented by 2*pie.  Although the cosecant is mathematically defined for all x, for x beyond approximately 1e77, the periodicity of the cosecant is not reconginized any more, so &app; issues an error.</para></listitem>
</varlistentry>
<varlistentry>
<term>dec (x)</term>
<listitem><para>Displays x in decimal format, without globally changing the output format.  This function is useful when you changed the output format to a binary format.</para></listitem>
</varlistentry>
<varlistentry>
<term>degrees (x)</term>
<listitem><para> Converts an angle measured in radian to degrees.  This function is especially useful, if you want to override the current angle mode for just one expression.</para></listitem>
</varlistentry>
<varlistentry>
<term>erf (x)</term>
<listitem><para>Determines the normalized error function of x, the cumulative distribution function to the normal distribution (bell cure, Gaussian distribution).</para></listitem>
</varlistentry>
<varlistentry>
<term>erfc (x)</term>
<listitem><para>Determines the normalized complementary error function of x, related to the cumulative probability function of the normal distribution (bell curve, Gaussian distribution).  Erfx(x) + erf(x) is always 1.</para></listitem>
</varlistentry>
<varlistentry>
<term>exp (x)</term>
<listitem><para>Evalutes the natural exponential function to the base e == 2.7182</para></listitem>
</varlistentry>
<varlistentry>
<term> floor (x)</term>
<listitem><para> Finds the greatest integer less or equal to x, the floor of x.</para></listitem>
</varlistentry>
<varlistentry>
<term>frac (x)</term>
<listitem><para>Cuts off the integral part of a real number</para></listitem>
</varlistentry>
<varlistentry>
<term>gamma (x)</term>
<listitem><para>An extension of factorials, the same as (x-1)!</para></listitem>
</varlistentry>
<varlistentry>
<term>gcd (n1; n2; ...)</term>
<listitem><para>Returns the greatest common divisor of the integers n1, n2 ... (2 or more).  You can use this function to reduce a rational number.  If a rational number is given as p/q, its reduced form is (p/gcd(p;q))/(q/gcd(p;q)).  Related to the gcd function is the lcm function (least common multplier).  You can find the lcm of two values by: lcm(n1;n2) = n1*n2/gcd(n1;n2).</para></listitem>
</varlistentry>
<varlistentry>
<term>geomean (x1; x2; ...)</term>
<listitem><para>Finds the geometric mean of the positive numbers x1, x2, ... (one or more parameters).  Non-positive parameters are not allowed.</para></listitem>
</varlistentry>
<varlistentry>
<term>hex (n)</term>
<listitem><para>Displays n in hexagesimal format, without globally changing the output format.  A fractional part of of n is cut of before converstion</para></listitem>
</varlistentry>
<varlistentry>
<term>hypercdf (max; total; hits; trials)</term>
<listitem><para>All parameters are integers, 0 &lt;= max &lt;= hits &lt;= trials &lt;= trials &lt;= total, and 0 &lt; total.  Assume there are 'hits' events in a series of 'total' tests.  Then this function evaluates the probability, that you will find up to max events of them in a subseries of 'trials' tests.</para></listitem>
</varlistentry>
<varlistentry>
<term>hypermean (total; hits; trials)</term>
<listitem><para>All parameters are integers, 0 &lt;= hits &lt;= total, 0 &lt;= trials &lt;= total, and 0 &lt; total.  Assume there are ' hits' events in a series of 'total' tests.  Then this function evalutes the expected count of events in a subseries of 'trials' tests.</para></listitem>
</varlistentry>
<varlistentry>
<term>hyperpmf (count; total; hits; trials)</term>
<listitem><para>All parameters are integers, 0 &lt;= max &lt;= hits &lt;= total, 0 &lt;= trials &lt;= total, and 0 &lt; total.</para></listitem>
</varlistentry>
<varlistentry>
<term>hypermean (total; hits; trials)</term>
<listitem><para>All paramters are integers, 0 &lt;= max &lt;= hits &lt;= total, 0 &lt;= trials &lt;= total, and 0 &lt; total.  Assume there are 'h its' events in a series of 'total tests.  Then this function evalutates the variance of the count of events in a subseries of 'trials' tests.  Or, in other words, it tells, how 'good' the result of hypermean is matched on the average, if you repeat your subseries of trials very often.</para></listitem>
</varlistentry>
<varlistentry>
<term>idiv (dividend; divisor)</term>
<listitem><para>Evaluates the integer part of divdend/divisor.  The result is always exact.  Since &app; can hold integers up to 78 digits, this function overflows even if the ordinary division operator would yeild an approximate (but huge) quotient.</para>
<para>It is possible to apply the idiv function to non-integers as well, but be aware that rounding errors might be lead to off-by-one erros.  If idiv detects, that a result depends on the validity of the guard digits, it returns a NaN as a warning.</para></listitem>
</varlistentry>
<varlistentry>
<term>int (x)</term>
<listitem><para>Returns the signed integer part of x.</para></listitem>
</varlistentry>
<varlistentry>
<term>lg (x)</term>
<listitem><para>Returns the base 2 logarathim of of x, where x has to be positive.  The inverse function is exp (y).</para></listitem>
</varlistentry>
<varlistentry>
<term>lngamma (x)</term>
<listitem><para>Evaluates ln(factorial(x-1)). Returns a result even when the ! operator overflows.</para></listitem>
</varlistentry>
<varlistentry>
<term>log (x)</term>
<listitem><para>Returns the base 10 logarathm of x where x has to be positive.</para></listitem>
</varlistentry>
<varlistentry>
<term>mask (n; bits)</term>
<listitem><para>Returns the lower 'bits' bits of the integer n.  The result is always unsigned.  N has to be from -2^255 to +2^256-1 (signed or unsigned 256 bit integers), bits is an integer ranging from 1 to 255 inclusive.  One application of this function is to find the two complement representation of a value.  So hex (mask (-1; 16)) returns 0xFFFF, the 16-bit two's complement bit pattern of -1.</para></listitem>
</varlistentry>
<varlistentry>
<term>max (x1; x2; ...)</term>
<listitem><para>Takes one or more parameter(s), which returns the maximum value of the submitted parametrs.  Example max(17; log 1000; exp(3)).</para></listitem>
</varlistentry>
<varlistentry>
<term>min(x1; x2; ...)</term>
<listitem><para>Takes one or more paramater(s) and returns the maximum value of the submitted parameters.  Example:  min(-0.4; log 0.1; exp(-3)).</para></listitem>
</varlistentry>
<varlistentry>
<term>mod (value; modulo)</term>
<listitem><para>Evaluates the value mod modulo, which is the remainder after finding the integer quootient value / modulo.  This function always returns an exact result, if the paramters are exact.  'Modulo' has to be non-zero and if the remainder is non-zero, it takes the sign of value.  You can use this function with non-integers as well, but rounding errors might lead to off-by-one errros.  This function can potentially be very time consuming, so mod is restricted to at most 250 division loops.</para></listitem>
</varlistentry>
<varlistentry>
<term>nCr (x1; x2)</term>
<listitem><para>For integer paramaters this function is equal to the number of combinations (order is of no importance) of x2 elements from an x1-sized of elements or to the binominal coefficient x1 over x2.</para>
<para>For arbitrary real valued x1, x2 the result is 1/(x1+1)*B(x2+1,x1-x2+1)), where B(a,b) is the complete Beta function.</para></listitem>
</varlistentry>
<varlistentry>
<term>not (n)</term>
<listitem><para>Evaluates the bitwise (one-) complement of n.  The result is a signed 256-bit integer.  n has to be an integer from the range -2^255 to +2^256-1 (signed or unsigned 256 bit integers).</para></listitem>
</varlistentry>
<varlistentry>
<term>nPr (x1; x2)</term>
<listitem><para>For integer paramaters this function is equal to the number of permutations (order is of importance) of x2 elements from an x1-sized of elements.</para>
<para>For real-valued paramaters this function is equal to gamma(x1+1)/gamma(x2).</para></listitem>
</varlistentry>
<varlistentry>
<term>oct (n)</term>
<listitem><para>Displays n in octal format, without globally changing the output format.  A fractional part of n is cut off before conversion, and the reamining integral part has to be from the range -2^255 to +2^256 -1.</para></listitem>
</varlistentry>
<varlistentry>
<term>or (x1; x2; ...)</term>
<listitem><para>Performs a bitwise logical OR on the submitted parameter(s) (one or more).  All parameters have to be integers from the range -2^255 to +2^255 -1 (signed integer).  Note that or(x) is not the identity, because the unsigned +2^255 is mapped to the signed -2^255, for example.</para></listitem>
</varlistentry>
<varlistentry>
<term>poicdf (events; avgevents)</term>
<listitem><para>'events' is a non-negative integer, 'avgevents' a positive real number.</para>
<para>If you have on the average 'avgevents' independent events in an interval, this function returns the probability, that you will see up to 'events' events when you test an interval.</para></listitem>
</varlistentry>
<varlistentry>
<term>poimean (avgevents)</term>
<listitem><para>avgevents &gt;=0.  Returns the average number of events in an interval, when this average is 'avgevents'.</para></listitem>
</varlistentry>
<varlistentry>
<term>pipmf (events; avgevnts)</term>
<listitem><para>'events' is a non-negative integer, 'avgevents' a positive real number.  If you have on the average 'avgevents' independent events in an interval, this function returns the probability, that you will see exactly 'events' events when you test an interval.</para></listitem>
</varlistentry>
<varlistentry>
<term>poivar (avgevents)</term>
<listitem><para>avgevents &gt;= 0.  The Poisson distribution assumes, that the variance equals the expected value 'avgevnts'.</para></listitem>
</varlistentry>
<varlistentry>
<term>radians (x)</term>
<listitem><para>Converts an angle measured in degrees to radians.  This function is especially useful, if you want to ovrride the current angle mode for just one expression.</para></listitem>
</varlistentry>
<varlistentry>
<term>round (x; digits)</term>
<listitem><para>Rounds x to 'digits' decimial places after the decimal point where 'digits' has to be an integer.</para></listitem>
</varlistentry>
<varlistentry>
<term>sec (x)</term>
<listitem><para>Evaluates the secant of x.  The result is dependent on the degree setting.  If &quot;degrees&quot; is active, the parameter x is assumed to be from a 360 degree circle.</para>
<para>Although the secant is mathematically defined for all x, for x beyond approximately 1e77, the periodicity of the secant is not recognized any more, so &app; issues an error.</para></listitem>
</varlistentry>
<varlistentry>
<term>shl (n, bits)</term>
<listitem><para>Shifts the bit pattern of n 'bits' to the left, if 'bits' &gt;=0, otherwise shifts n arithmetically by -'bits' to the right.  255 &lt;= bits &lt;= 255, and n has to be an integer from the range -2^255 to +2^256-1 (signed or unsigned 256 bit integers).  The result is from -2^255 to +255-1 (signed integer).</para>
<para>On a shift left, zero bits are fed in to the right, and shifted out bits are dropped on the left.  On a shift right, bit 255 (the leftmost bit) is copied and shifted in from the left, and shifted out bits on the right are dropped.</para></listitem>
</varlistentry>
<varlistentry>
<term>shr (n, bits)</term>
<listitem><para>Shifts the bit pattern of n 'bits' to the right, if 'bits' &gt;=0, otherwise shifts n arthmetically by -'bits' to the left.</para>
<para>On a shift left, zero bits are fed in to the right, and shifted out bits are dropped on the left.  On a shift right, bit 255 (the leftmost bit) is copied and shifted in from the left, and shifted out bits on the right are dropped.</para></listitem>
</varlistentry>
<varlistentry>
<term>sign (x)</term>
<listitem><para>Returns the sign of x, -1 if negative, 1 if positive, and 0 for 0.</para></listitem>
</varlistentry>
<varlistentry>
<term>sin (x)</term>
<listitem><para>Evaluates the sine of x, which is dependent on the degree setting.  If &quot;degress&quot; is active, the parameter x is assumed to be an arc from a 360 degree circle.  The inverse function is asin(y).</para>
<para>Although the sine is mathematically defined for all x, for x beyond approximately 1e77, the periodicity of the sine is not recognized any more, so &app; issues an error.</para></listitem>
</varlistentry>
<varlistentry>
<term>sinh (x)</term>
<listitem><para>Finds the hyperbolic sine of x, with the inverse function being arsinh.</para></listitem>
</varlistentry>
<varlistentry>
<term>sqrt (x)</term>
<listitem><para>Computes the square root of x, which is not defined for x &lt; 0.</para></listitem>
</varlistentry>
<varlistentry>
<term>tan (x)</term>
<listitem><para>Evaultes the tangent of x.  The result is dependent on the degree setting.  If &quot;degress&quot; is active, the paramater x is assumed to be an arc from a 360 degree circle.  The inverse function is atan(y).</para>
<para>Although the tangent is mathematically defined for all x, for x beyond approximately 1e77, the periodicity of the tangent is not recognized any more, so &app; issues an error.</para></listitem>
</varlistentry>
<varlistentry>
<term>tanh (x)</term>
<listitem><para>Finds the hyperbolic sine of x, where the inverse function is artanh.</para></listitem>
</varlistentry>
<varlistentry>
<term>trunc (x; digits)</term>
<listitem><para>truncates x after 'digits' decimal places behind the decimal point where 'digits' has to be an integer.</para></listitem>
</varlistentry>
<varlistentry>
<term>unmask (n; bits)</term>
<listitem><para>Takes the lower 'bits bits of n and sign-extends them to full 256 bit, meaning bit number 'bits'-1 is copied to all upper bits.  n has to be an integer from the range -2^255 to +2^256-1 (signed or unsigned 256 bit integers), and 'bits' is an integer with 1 &lt;= bits &lt;= 255.  This function can revert the effect of a mask function in many cases.</para>
<para>If you are given a negative integer in two's complement notation, it is not possible to enter it directly as a constant, because binary, hex or octal encoded constants are always recognized as unsigned in &app;.</para></listitem>
</varlistentry>
<varlistentry>
<term>xor (x1; x2; ...)</term>
<listitem><para>Performs a bitwise logical XOR on the submitted parameter(s) (one or more).  All paramters have to be integers from the range -2^255 to +2^255-1 (signed integer).  Note that xor(x) is not the identity, because the unsigned +2^255 is mapped to the signed -2^255, for example.</para></listitem>
</varlistentry>
</variablelist>
</sect1>
</chapter>


<chapter id="questions-and-answers">
<title>Questions and Answers</title>

<qandaset>

<qandaentry>
<question><para>What is ans?</para></question>
<answer><para>Ans is a special variable which holds the last calculation result.</para></answer>
</qandaentry>

</qandaset>

</chapter>

<chapter id="copyright">
<title>Credits and License</title>

<para>Program Copyright &copy; 2004-2008 Ariya Hidayat</para>
<para>Program Copyright &copy; 2005-2006 Johan Thelin</para>
<para>Program Copyright &copy; 2007-2008 Helder Correia</para>
<para>Program Copyright &copy; 2007-2008 Wolf Lammen</para>

<para>Documentation Copyright &copy; 2007 Ariya Hidayat.</para>
<para>Documentation Copyright &copy; 2008 Wolf Lammen.</para>
<!-- TRANS:CREDIT_FOR_TRANSLATORS -->
&underFDL;
&underGPL;

</chapter>


</book>
